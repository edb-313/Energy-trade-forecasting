<<<<<<< Updated upstream
'Liquefied U.S. Natural Gas Exports by Truck to Canada (Million Cubic Feet)'))]
#cleaning column names
colnames(nat_gas) <- gsub(pattern = ".*(to\\s)", "", colnames(nat_gas))
colnames(nat_gas) <- gsub("\\(.*?\\)", "", colnames(nat_gas))
#pivoting data
gastemp <- nat_gas %>%
pivot_longer(cols = -Date,
names_to = 'Destination country',
values_to = 'Amount of Natural gas (MMcf)')
#converting to tsibbles
gastemp
#removing n/as in date column, fixing date formatting, fixing values (romoving space in the end)
gastemp <- gastemp %>%
drop_na(Date) %>%
mutate(Date = as.Date(Date)) %>%
mutate(`Destination country` = str_trim(`Destination country`))
#identifying duplicate values
duplicates(gastemp, index = "Date", key = "Destination country")
#Total Crude Oil Exports by Destination
raw_crude_oil <- read_csv("https://raw.githubusercontent.com/edb-313/Energy-trade-forecasting/main/Data/csv/Total%20Crude%20Oil%20Exports%20by%20Destination_EIA.csv", skip = 2,)
#Leaving only country names in column names
names(raw_crude_oil)[-2] <- str_replace_all(names(raw_crude_oil)[-2],
c("U.S. Exports to " = "",
" of Crude Oil \\(Thousand Barrels\\)" = ""))
#Pivoting (switching) columns starting from 2 column to rows
crude_oil <- raw_crude_oil %>%
pivot_longer(cols = -Date,
names_to = 'Destination country',
values_to = 'Amount of Crude Oil (Thousand Barrels)')
#Filtering out values where Date is 'NA'
crude_oil <- crude_oil %>%
drop_na(Date) %>%
mutate(Date = as.Date(Date))
#Fixing date format, replacing 'na' values with 0
crude_oil$Date <- as.Date(crude_oil$Date)
crude_oil$`Amount of Crude Oil (Thousand Barrels)` <- replace_na(crude_oil$`Amount of Crude Oil (Thousand Barrels)`, 0)
#Setting up the tsibble
ts_crude_oil <- crude_oil %>%
as_tsibble(
index = Date,
key = `Destination country`
)
#OECD Europe Countries vector
oecd_europe <- c("Austria", "Belgium", "Czech Republic", "Denmark", "Estonia",
"Finland", "France", "Germany", "Greece", "Hungary", "Iceland",
"Ireland", "Italy", "Latvia", "Lithuania", "Luxembourg",
"Netherlands", "Norway", "Poland", "Portugal", "Slovak Republic",
"Slovenia", "Spain", "Sweden", "Switzerland", "Turkey",
"United Kingdom")
#filtering out only relevant values
ts_crude_oil <- ts_crude_oil %>%
filter(`Destination country` %in% oecd_europe) %>%
filter(Date >= as.Date("2013-01-15"), Date <= as.Date("2023-01-15"))
ts_crude_oil
################################################################################
#Total Oil Products Exports by Destination
raw_oil_products <- read_csv("https://raw.githubusercontent.com/edb-313/Energy-trade-forecasting/main/Data/csv/Total%20Oil%20Products%20Exports%20by%20Destination_EIA.csv",  skip = 2,)
names(raw_oil_products)[-2] <- str_replace_all(names(raw_oil_products)[-2],
c("U.S. Exports to " = "",
" of Total Petroleum Products \\(Thousand Barrels\\)" = ""))
oil_products <- raw_oil_products %>%
pivot_longer(cols = -Date,
names_to = 'Destination country',
values_to = 'Amount of total Petroleum Porducts (Thousand Barrels)')
oil_products$`Amount of total Petroleum Porducts (Thousand Barrels)` <- replace_na(oil_products$`Amount of total Petroleum Porducts (Thousand Barrels)`, 0)
oil_products <- oil_products %>%
drop_na(Date) %>%
mutate(Date = as.Date(Date))
ts_oil_products <- oil_products %>%
as_tsibble(
index = Date,
key = `Destination country`
)
ts_oil_products <- ts_oil_products %>%
filter(`Destination country` %in% oecd_europe) %>%
filter(Date >= as.Date("2013-01-15"), Date <= as.Date("2023-01-15"))
################################################################################
#Reliance on Russian gas
raw_rel_rusoil <- read_csv("https://raw.githubusercontent.com/edb-313/Energy-trade-forecasting/main/Data/csv/Monthly_Reliance_on_Russian_Oil.csv", skip = 1)
colnames(raw_rel_rusoil)
rel_rusoil <- raw_rel_rusoil %>%
pivot_longer(cols = -...1,
names_to = 'Date',
=======
>>>>>>> Stashed changes
values_to = 'Total Oil Imports from Russia / Total Oil Imports (%)')
rel_rusoil <- rel_rusoil %>%
rename(Country = ...1) %>%
mutate(Date = lubridate::dmy(Date)) %>%
select("Date","Country","Total Oil Imports from Russia / Total Oil Imports (%)")
ts_rel_rusoil <- rel_rusoil %>%
as_tsibble(
index = Date,
key = Country)
################################################################################
#Total Natural Gas Exports by Destination
raw_nat_gas <- read.csv('https://raw.githubusercontent.com/edb-313/Energy-trade-forecasting/main/Data/csv/Natural%20Gas%20Exports%20by%20Country_EIA.csv',header=TRUE , check.names=FALSE, skip = 2)
# drop columns 2-3, 6-8, 54 and 57-72
raw_nat_gas <- subset(raw_nat_gas, select = -c(2:3, 6:8,54, 57:72))
raw_nat_gas[is.na(raw_nat_gas)] <- 0
#cimbining exports to the same countries
nat_gas <- raw_nat_gas %>%
mutate(Mexico = `U.S. Natural Gas Pipeline Exports to Mexico (MMcf)` + `Liquefied U.S. Natural Gas Exports by Truck to Mexico (Million Cubic Feet)`,
Canada = `U.S. Natural Gas Pipeline Exports to Canada (MMcf)` + `Liquefied U.S. Natural Gas Exports by Truck to Canada (Million Cubic Feet)`)
#removing duplicate columns
nat_gas <- nat_gas[, !(names(nat_gas) %in% c('U.S. Natural Gas Pipeline Exports to Mexico (MMcf)',
'Liquefied U.S. Natural Gas Exports by Truck to Mexico (Million Cubic Feet)',
'U.S. Natural Gas Pipeline Exports to Canada (MMcf)',
'Liquefied U.S. Natural Gas Exports by Truck to Canada (Million Cubic Feet)'))]
#cleaning column names
colnames(nat_gas) <- gsub(pattern = ".*(to\\s)", "", colnames(nat_gas))
colnames(nat_gas) <- gsub("\\(.*?\\)", "", colnames(nat_gas))
#pivoting data
gastemp <- nat_gas %>%
pivot_longer(cols = -Date,
names_to = 'Destination country',
values_to = 'Amount of Natural gas (MMcf)')
#converting to tsibbles
gastemp
#removing n/as in date column, fixing date formatting, fixing values (romoving space in the end)
gastemp <- gastemp %>%
drop_na(Date) %>%
mutate(Date = as.Date(Date)) %>%
mutate(`Destination country` = str_trim(`Destination country`))
#identifying duplicate values
duplicates(gastemp, index = "Date", key = "Destination country")
gastemp <- gastemp %>%
drop_na(Date) %>%
mutate(Date = as.Date(Date)) %>%
mutate(`Destination country` = str_trim(`Destination country`))
duplicates(gastemp, index = "Date", key = "Destination country")
gastemp <- gastemp %>%
group_by(Date, `Destination country`) %>%
summarize_at(vars(`Amount of Natural gas (MMcf)`), sum) %>%
ungroup()
#creating a tsibble
ts_nat_gas <- gastemp %>%
as_tsibble(
index = Date,
key = `Destination country`
)
#filtering only relevant data
ts_nat_gas <- ts_nat_gas %>%
filter(`Destination country` %in% oecd_europe) %>%
filter(Date >= as.Date("2013-01-15"), Date <= as.Date("2023-01-15"))
ts_crude_oil
ts_crude_oil %>% autoplot(`Amount of Crude Oil (Thousand Barrels)`)
as_tsibble(ts_crude_oil)
ts_crude_oil %>% autoplot(`Amount of Crude Oil (Thousand Barrels)`)
class(ts_crude_oil)
library(fpp3)
library(tidyverse)
library(readxl)
library(httr)
library(ggplot2)
library(dplyr)
library(stringr)
library(tidyr)
library(OECD)
library(tsibble)
library(lubridate)
library(zoo)
library(readr)
library(ggfortify)
ts_crude_oil %>% autoplot(`Amount of Crude Oil (Thousand Barrels)`)
as_tsibble(ts_crude_oil)
class(ts_crude_oil)
ts_crude_oil %>% autoplot(`Amount of Crude Oil (Thousand Barrels)`)
library(tsibble)
as_tsibble(ts_crude_oil)
class(ts_crude_oil)
ts_crude_oil %>% autoplot(`Amount of Crude Oil (Thousand Barrels)`)
ts_crude_oil %>%
ggplot(aes(x = Date, y = `Amount of Crude Oil (Thousand Barrels)`)) +
geom_line() +
labs(title = "Crude Oil Production",
y = "Thousand Barrels",
x = "Year")
ts_crude_oil <- ts_crude_oil %>%
filter(`Destination country` %in% oecd_europe) %>%
filter(Date >= as.Date("2018-01-15"), Date <= as.Date("2023-01-15"))
ts_crude_oil %>%
ggplot(aes(x = Date, y = `Amount of Crude Oil (Thousand Barrels)`)) +
geom_line() +
labs(title = "Crude Oil Production",
y = "Thousand Barrels",
x = "Year")
ts_crude_oil %>%
filter(`Destination country` == "Netherlands") %>%
autoplot(`Amount of Crude Oil (Thousand Barrels)`)
ts_crude_oil <- ts_crude_oil %>%
filter(`Destination country` %in% oecd_europe) %>%
filter(Date >= as.Date("2013-01-15"), Date <= as.Date("2023-01-15"))
ts_crude_oil %>%
filter(`Destination country` == "Netherlands") %>%
autoplot(`Amount of Crude Oil (Thousand Barrels)`)
ts_crude_oil
ts_crude_oil_agg <- ts_crude_oil %>%
aggregate_key(Date, .init = 0) %>%
summarise(`Amount of Crude Oil (Thousand Barrels)` = sum(`Amount of Crude Oil (Thousand Barrels)`))
ts_crude_oil_agg <- ts_crude_oil %>%
aggregate_key(Date) %>%
summarise(`Amount of Crude Oil (Thousand Barrels)` = sum(`Amount of Crude Oil (Thousand Barrels)`))
ts_crude_oil_agg <- ts_crude_oil %>%
aggregate_key(Date) %>%
summarise(`Amount of Crude Oil (Thousand Barrels)` = sum(`Amount of Crude Oil (Thousand Barrels)`))
group_by(Date) %>%
summarize_at(vars(`Amount of Crude Oil (Thousand Barrels)`), sum) %>%
ungroup()
ts_crude_oil_agg <- ts_crude_oil %>%
group_by(Date) %>%
summarize_at(vars(`Amount of Crude Oil (Thousand Barrels)`), sum) %>%
ungroup()
ts_crude_oil_agg <- ts_crude_oil %>%
index_by(Date) %>%
summarize_at(vars(`Amount of Crude Oil (Thousand Barrels)`), sum) %>%
ungroup()
ts_crude_oil
ts_crude_oil_agg
ts_crude_oil_agg %>%
autoplot(`Amount of Crude Oil (Thousand Barrels)`)
ts_crude_oil_agg %>% features(`Amount of Crude Oil (Thousand Barrels)`, features = guerrero)
oecd_crude_oil <- ts_crude_oil %>%
filter(`Destination country` %in% oecd_europe) %>%
filter(Date >= as.Date("2013-01-15"), Date <= as.Date("2023-01-15"))
oecd_crude_oil
ts_crude_oil_agg <- oecd_crude_oil %>%
index_by(Date) %>%
summarize_at(vars(`Amount of Crude Oil (Thousand Barrels)`), sum) %>%
ungroup()
oecd_crude_oil_agg <- oecd_crude_oil %>%
index_by(Date) %>%
summarize_at(vars(`Amount of Crude Oil (Thousand Barrels)`), sum) %>%
ungroup()
ts_crude_oil_agg
oecd_crude_oil_agg %>%
autoplot(`Amount of Crude Oil (Thousand Barrels)`)
oecd_crude_oil %>% features(`Amount of Crude Oil (Thousand Barrels)`, features = guerrero)
oecd_crude_oil_agg %>% features(`Amount of Crude Oil (Thousand Barrels)`, features = guerrero)
oecd_crude_oil_agg %>% autoplot(box_cox(`Amount of Crude Oil`, 0.372)) +
labs(y = "Box-Cox transformed exports")
ts_crude_oil_agg %>% features(`Amount of Crude Oil (Thousand Barrels)`, features = guerrero)
oecd_crude_oil_agg %>% autoplot(box_cox(`Amount of Crude Oil (Thousand Barrels)`, 0.372)) +
labs(y = "Box-Cox transformed exportamounts")
dcmp_oecd_crude_oil <- oecd_crude_oil_agg %>%
model(stl = STL(`Amount of Crude Oil (Thousand Barrels)`))
components(dcmp_oecd_crude_oil)
dcmp_oecd_crude_oil <- oecd_crude_oil_agg %>%
model(stl = STL(`Amount of Crude Oil (Thousand Barrels)`))
components(dcmp_oecd_crude_oil)
dcmp_oecd_crude_oil <- oecd_crude_oil_agg %>%
model(stl = STL(`Amount of Crude Oil (Thousand Barrels)`))
dcmp_oecd_crude_oil <- oecd_crude_oil_agg %>%
model(stl = STL(`Amount of Crude Oil (Thousand Barrels)`))
oecd_crude_oil_agg <- oecd_crude_oil %>%
index_by(Date) %>%
summarize_at(vars(`Amount of Crude Oil (Thousand Barrels)`), sum) %>%
ungroup() %>%
frequency = 12
oecd_crude_oil_agg <- oecd_crude_oil %>%
index_by(Date) %>%
summarize_at(vars(`Amount of Crude Oil (Thousand Barrels)`), sum) %>%
ungroup() %>%
frequency = 12
oecd_crude_oil_agg <- oecd_crude_oil %>%
index_by(Date) %>%
summarize_at(vars(`Amount of Crude Oil (Thousand Barrels)`), sum) %>%
ungroup()
oecd_crude_oil_agg
oecd_crude_oil_agg <- oecd_crude_oil_agg %>%
mutate(Date = as.yearmon(Date)) %>%
rename("Year Month" = Date)
library(zoo)
oecd_crude_oil_agg <- oecd_crude_oil_agg %>%
mutate(Date = as.yearmon(Date)) %>%
rename("Year Month" = Date)
oecd_crude_oil_agg
oecd_crude_oil_agg <- oecd_crude_oil_agg %>%
mutate(Date = as.yearmon(Date)) %>%
rename("Year Month" = Date)
oecd_crude_oil_agg <- oecd_crude_oil_agg %>%
mutate(Date = as.Date(Date)) %>%
mutate("Year Month" = as.yearmon(Date)) %>%
select("Year Month", `Amount of Crude Oil (Thousand Barrels)`)
oecd_crude_oil_agg <- oecd_crude_oil_agg %>%
mutate(Date = yearmonth(Date))
View(oecd_crude_oil_agg)
oecd_crude_oil_agg %>%
autoplot(`Amount of Crude Oil (Thousand Barrels)`)
ts_crude_oil_agg %>% features(`Amount of Crude Oil (Thousand Barrels)`, features = guerrero)
oecd_crude_oil_agg %>% autoplot(box_cox(`Amount of Crude Oil (Thousand Barrels)`, 0.372)) +
labs(y = "Box-Cox transformed exportamounts")
dcmp_oecd_crude_oil <- oecd_crude_oil_agg %>%
model(stl = STL(`Amount of Crude Oil (Thousand Barrels)`))
components(dcmp_oecd_crude_oil)
components(dcmp_total_quarterly) %>% autoplot()
components(dcmp_oecd_crude_oil) %>% autoplot()
oecd_crude_oil_agg %>%
autoplot(`Amount of Crude Oil (Thousand Barrels)`, color='gray') +
autolayer(components(dcmp_oecd_crude_oil), trend, color='red') +
xlab("Year") + ylab("Barels thousands") +
ggtitle("U.S. Exports of Crude Oil (Thousand Barrels)")
components(dcmp_oecd_crude_oil) %>% gg_subseries(season_)
components(dcmp_oecd_crude_oil) %>% gg_subseries(season_year)
oecd_oil_products <- ts_oil_products %>%
filter(`Destination country` %in% oecd_europe) %>%
filter(Date >= as.Date("2013-01-15"), Date <= as.Date("2023-01-15"))
View(oecd_oil_products)
oecd_oil_products_agg <- oecd_crude_oil %>%
index_by(Date) %>%
summarize_at(vars(`Amount of Crude Oil (Thousand Barrels)`), sum) %>%
ungroup()
oecd_oil_products_agg
oecd_oil_products_agg <- oecd_oil_products_agg %>%
mutate(Date = yearmonth(Date))
oecd_oil_products_agg <- oecd_oil_products_agg %>%
index_by(Date) %>%
summarize_at(vars(`Amount of Crude Oil (Thousand Barrels)`), sum) %>%
ungroup()
oecd_oil_products_agg <- oecd_oil_products %>%
index_by(Date) %>%
summarize_at(vars(`Amount of total Petroleum Porducts (Thousand Barrels)`), sum) %>%
ungroup()
oecd_oil_products_agg
oecd_oil_products_agg <- oecd_oil_products_agg %>%
mutate(Date = yearmonth(Date))
oecd_oil_products_agg %>%
autoplot(`Amount of total Petroleum Porducts (Thousand Barrels)`)
oecd_oil_products_agg <- oecd_oil_products %>%
index_by(Date) %>%
summarize_at(vars(`Amount of total Petroleum Porducts (Thousand Barrels)`), sum) %>%
ungroup()
oecd_oil_products_agg
oecd_oil_products_agg <- oecd_oil_products_agg %>%
mutate(Date = yearmonth(Date))
oecd_oil_products_agg %>%
autoplot(`Amount of total Petroleum Porducts (Thousand Barrels)`)
oecd_crude_oil_agg %>% features(`Amount of Crude Oil (Thousand Barrels)`, features = guerrero)
oecd_crude_oil_agg %>% autoplot(box_cox(`Amount of Crude Oil (Thousand Barrels)`, 1.13)) +
labs(y = "Box-Cox transformed exportamounts")
oecd_crude_oil_agg %>%
autoplot(`Amount of Crude Oil (Thousand Barrels)`)
oecd_crude_oil_agg %>% autoplot(box_cox(`Amount of Crude Oil (Thousand Barrels)`, 1.13)) +
labs(y = "Box-Cox transformed exportamounts")
oecd_crude_oil_agg %>% features(`Amount of Crude Oil (Thousand Barrels)`, features = guerrero)
dcmp_oecd_crude_oil <- oecd_crude_oil_agg %>%
model(stl = STL(`Amount of Crude Oil (Thousand Barrels)`))
components(dcmp_oecd_crude_oil)
components(dcmp_oecd_crude_oil) %>% autoplot()
oecd_crude_oil_agg %>%
autoplot(`Amount of Crude Oil (Thousand Barrels)`, color='gray') +
autolayer(components(dcmp_oecd_crude_oil), trend, color='red') +
xlab("Year") + ylab("Barels thousands") +
ggtitle("U.S. Exports of Crude Oil (Thousand Barrels)")
components(dcmp_oecd_crude_oil) %>% gg_subseries(season_year)
oecd_oil_products_agg %>% features(`Amount of total Petroleum Porducts (Thousand Barrels)`, features = guerrero)
oecd_oil_products_agg %>% autoplot(box_cox(`Amount of total Petroleum Porducts (Thousand Barrels)`, 0.73)) +
labs(y = "Box-Cox transformed exportamounts")
oecd_oil_products_agg %>%
autoplot(`Amount of total Petroleum Porducts (Thousand Barrels)`)
oecd_oil_products_agg %>% autoplot(box_cox(`Amount of total Petroleum Porducts (Thousand Barrels)`, 0.73)) +
labs(y = "Box-Cox transformed exportamounts")
dcmp_oecd_oil_products <- oecd_oil_products_agg %>%
model(stl = STL(`Amount of total Petroleum Porducts (Thousand Barrels)`))
components(dcmp_oecd_oil_products)
components(dcmp_oecd_oil_products) %>% autoplot()
oecd_oil_products_agg %>%
autoplot(`Amount of total Petroleum Porducts (Thousand Barrels)`, color='gray') +
autolayer(components(dcmp_oecd_oil_products), trend, color='red') +
xlab("Year") + ylab("Barels thousands") +
ggtitle("U.S. Exports of Petroleum Porducts to OECD Europe (Thousand Barrels)")
components(dcmp_oecd_oil_products) %>% gg_subseries(season_year)
oecd_nat_gas <- ts_nat_gas %>%
filter(`Destination country` %in% oecd_europe) %>%
filter(Date >= as.Date("2013-01-15"), Date <= as.Date("2023-01-15"))
View(oecd_nat_gas)
oecd_nat_gas_agg <- oecd_nat_gas %>%
index_by(Date) %>%
summarize_at(vars(`Amount of Natural gas (MMcf)`), sum) %>%
ungroup()
oecd_nat_gas
oecd_nat_gas_agg <- oecd_nat_gas_agg %>%
mutate(Date = yearmonth(Date))
View(oecd_nat_gas_agg)
oecd_nat_gas_agg
oecd_nat_gas_agg <- oecd_nat_gas_agg %>%
mutate(Date = yearmonth(Date))
oecd_nat_gas_agg %>%
autoplot(`Amount of Natural gas (MMcf)`)
oecd_nat_gas_agg %>% features(`Amount of Natural gas (MMcf)`, features = guerrero)
oecd_nat_gas_agg %>% autoplot(box_cox(`Amount of Natural gas (MMcf)`, 0.390)) +
labs(y = "Box-Cox transformed exportamounts")
oecd_nat_gas_agg %>%
autoplot(`Amount of Natural gas (MMcf)`)
oecd_nat_gas_agg %>% autoplot(box_cox(`Amount of Natural gas (MMcf)`, 0.390)) +
labs(y = "Box-Cox transformed exportamounts")
dcmp_oecd_nat_gas <- oecd_nat_gas_agg %>%
model(stl = STL(`Amount of Natural gas (MMcf)`))
components(dcmp_oecd_nat_gas)
components(dcmp_oecd_nat_gas) %>% autoplot()
oecd_nat_gas_agg %>%
autoplot(`Amount of Natural gas (MMcf)`, color='gray') +
autolayer(dcmp_oecd_nat_gas, trend, color='red') +
xlab("Year") + ylab("Amount of Natural Gas (MMcf") +
ggtitle("U.S. Exports of Natural Gas to OECD Europe (MMcf)")
dcmp_oecd_nat_gas <- oecd_nat_gas_agg %>%
model(stl = STL(`Amount of Natural gas (MMcf)`))
oecd_nat_gas_agg %>%
autoplot(`Amount of Natural gas (MMcf)`, color='gray') +
autolayer(dcmp_oecd_nat_gas, trend, color='red') +
xlab("Year") + ylab("Amount of Natural Gas (MMcf") +
ggtitle("U.S. Exports of Natural Gas to OECD Europe (MMcf)")
components(dcmp_oecd_nat_gas) %>% gg_subseries(season_year)
oecd_nat_gas_agg %>%
autoplot(`Amount of Natural gas (MMcf)`, color='gray') +
autolayer(dcmp_oecd_nat_gas, trend, color='red') +
xlab("Year") + ylab("Amount of Natural Gas (MMcf") +
ggtitle("U.S. Exports of Natural Gas to OECD Europe (MMcf)")
oecd_nat_gas_agg %>%
autoplot(`Amount of Natural gas (MMcf)`, color='gray') +
autolayer(components(dcmp_oecd_nat_gas), trend, color='red') +
xlab("Year") + ylab("Amount of Natural Gas (MMcf") +
ggtitle("U.S. Exports of Natural Gas to OECD Europe (MMcf)")
#Time series decomposition
########### Crude Oil Exports ##################################################################
#ploting the data
oecd_crude_oil_agg <- oecd_crude_oil %>%
index_by(Date) %>%
summarize_at(vars(`Amount of Crude Oil (Thousand Barrels)`), sum) %>%
ungroup()
oecd_crude_oil_agg
oecd_crude_oil_agg <- oecd_crude_oil_agg %>%
mutate(Date = yearmonth(Date))
oecd_crude_oil_agg %>%
autoplot(`Amount of Crude Oil (Thousand Barrels)`)
#finding lambda for box cox transformation
oecd_crude_oil_agg %>% features(`Amount of Crude Oil (Thousand Barrels)`, features = guerrero)
#box cox transformation
oecd_crude_oil_agg %>% autoplot(box_cox(`Amount of Crude Oil (Thousand Barrels)`, 1.13)) +
labs(y = "Box-Cox transformed exportamounts")
#decomposition
dcmp_oecd_crude_oil <- oecd_crude_oil_agg %>%
model(stl = STL(`Amount of Crude Oil (Thousand Barrels)`))
components(dcmp_oecd_crude_oil)
#ploting the components
components(dcmp_oecd_crude_oil) %>% autoplot()
#trend component against all components
oecd_crude_oil_agg %>%
autoplot(`Amount of Crude Oil (Thousand Barrels)`, color='gray') +
autolayer(components(dcmp_oecd_crude_oil), trend, color='red') +
xlab("Year") + ylab("Barels thousands") +
ggtitle("U.S. Exports of Crude Oil to OECD Europe (Thousand Barrels)")
#seasonal oomponent
components(dcmp_oecd_crude_oil) %>% gg_subseries(season_year)
###########  Oil Products Exports #######################################################
#ploting the data
oecd_oil_products_agg <- oecd_oil_products %>%
index_by(Date) %>%
summarize_at(vars(`Amount of total Petroleum Porducts (Thousand Barrels)`), sum) %>%
ungroup()
oecd_oil_products_agg
oecd_oil_products_agg <- oecd_oil_products_agg %>%
mutate(Date = yearmonth(Date))
oecd_oil_products_agg %>%
autoplot(`Amount of total Petroleum Porducts (Thousand Barrels)`)
#finding lambda for box cox transformation
oecd_oil_products_agg %>% features(`Amount of total Petroleum Porducts (Thousand Barrels)`, features = guerrero)
#box cox transformation
oecd_oil_products_agg %>% autoplot(box_cox(`Amount of total Petroleum Porducts (Thousand Barrels)`, 0.73)) +
labs(y = "Box-Cox transformed exportamounts")
#decomposition
dcmp_oecd_oil_products <- oecd_oil_products_agg %>%
model(stl = STL(`Amount of total Petroleum Porducts (Thousand Barrels)`))
components(dcmp_oecd_oil_products)
#ploting the components
components(dcmp_oecd_oil_products) %>% autoplot()
#trend component against all components
oecd_oil_products_agg %>%
autoplot(`Amount of total Petroleum Porducts (Thousand Barrels)`, color='gray') +
autolayer(components(dcmp_oecd_oil_products), trend, color='red') +
xlab("Year") + ylab("Barels thousands") +
ggtitle("U.S. Exports of Petroleum Porducts to OECD Europe (Thousand Barrels)")
#seasonal oomponent
components(dcmp_oecd_oil_products) %>% gg_subseries(season_year)
########### Natural Gas Exports #######################################################
#ploting the data
oecd_nat_gas_agg <- oecd_nat_gas %>%
index_by(Date) %>%
<<<<<<< Updated upstream
summarize_at(vars(`Amount of Natural gas (MMcf)`), sum) %>%
ungroup()
oecd_nat_gas_agg
oecd_nat_gas_agg <- oecd_nat_gas_agg %>%
mutate(Date = yearmonth(Date))
oecd_nat_gas_agg %>%
autoplot(`Amount of Natural gas (MMcf)`)
#finding lambda for box cox transformation
oecd_nat_gas_agg %>% features(`Amount of Natural gas (MMcf)`, features = guerrero)
#box cox transformation
oecd_nat_gas_agg %>% autoplot(box_cox(`Amount of Natural gas (MMcf)`, 0.390)) +
labs(y = "Box-Cox transformed exportamounts")
#decomposition
dcmp_oecd_nat_gas <- oecd_nat_gas_agg %>%
model(stl = STL(`Amount of Natural gas (MMcf)`))
components(dcmp_oecd_nat_gas)
#ploting the components
components(dcmp_oecd_nat_gas) %>% autoplot()
#trend component against all components
oecd_nat_gas_agg %>%
autoplot(`Amount of Natural gas (MMcf)`, color='gray') +
autolayer(components(dcmp_oecd_nat_gas), trend, color='red') +
xlab("Year") + ylab("Amount of Natural Gas (MMcf") +
ggtitle("U.S. Exports of Natural Gas to OECD Europe (MMcf)")
#seasonal oomponent
components(dcmp_oecd_nat_gas) %>% gg_subseries(season_year)
=======
summarise(Total_Exports = sum(`Amount`)) %>%
mutate(Total_Exports = box_cox(Total_Exports, lambda = lambda1))
# Compute lambda using guerrero method for Natural gas
lambda3 <- total_exp_oecd %>%
filter(`Export Type` == "Amount of Natural gas (BOE)") %>%
index_by(Date) %>%
summarise(Total_Exports = sum(`Amount`)) %>%
features(Total_Exports, features = guerrero) %>%
pull(lambda_guerrero)
# Compute lambda using guerrero method for Crude Oil
lambda1 <- total_exp_oecd %>%
filter(`Export Type` == "Amount of Crude Oil (Thousand Barrels)") %>%
index_by(Date) %>%
summarise(Total_Exports = sum(`Amount`)) %>%
features(Total_Exports, features = guerrero) %>%
pull(lambda_guerrero)
# Apply Box-Cox transformation
crude_oil_agg <- total_exp_oecd %>% filter(year(Date) >= 2016) %>%
filter(`Export Type` == "Amount of Crude Oil (Thousand Barrels)") %>%
index_by(Date) %>%
summarise(Total_Exports = sum(`Amount`)) %>%
mutate(Total_Exports = box_cox(Total_Exports, lambda = lambda1))
# Compute lambda using guerrero method for Natural gas
lambda3 <- total_exp_oecd %>%
filter(`Export Type` == "Amount of Natural gas (BOE)") %>%
index_by(Date) %>%
summarise(Total_Exports = sum(`Amount`)) %>%
features(Total_Exports, features = guerrero) %>%
pull(lambda_guerrero)
# Apply Box-Cox transformation
nat_gas_agg <- total_exp_oecd %>% filter(year(Date) >= 2016) %>%
filter(`Export Type` == "Amount of Natural gas (BOE)") %>%
index_by(Date) %>%
summarise(Total_Exports = sum(`Amount`)) %>%
mutate(Total_Exports = box_cox(Total_Exports, lambda = lambda3))
# Combine the transformed time series
combined_data <- merge(crude_oil_agg, nat_gas_agg, by = "Date", all = TRUE)
#plotting time series
#Determining the ETS Model for Crude OIL
ggplot(combined_data, aes(x = Date)) +
geom_line(aes(y = Total_Exports.x, color = "Crude Oil")) +
geom_line(aes(y = Total_Exports.y, color = "Natural Gas")) +
ylab("Amount (Transformed)") +
ggtitle("Crude Oil and Natural Gas Exports") +
scale_color_manual(values = c("Crude Oil" = "red", "Natural Gas" = "green"))
fit<-crude_oil_agg %>%
model(
additive=ETS(Total_Exports~error("A")+trend("A")+season("A")),
multiplicative = ETS(Total_Exports ~ error("M") + trend("M") + season("M")),
random1 = ETS(Total_Exports ~ error("M") + trend("A") + season("A")),
)
accuracy(fit)
accuracy(fit)
accuracy(crude_fit)
tidy(fit %>% select(additive))
#checking accuracy
accuracy(fit)
#ploting
fit %>% select(additive) %>% components() %>% autoplot() + xlab("Month")
addi_FC<-fit %>% select(additive) %>% forecast(h=36)
addi_FC %>%
autoplot(
crude_oil_agg) +
labs(
y = "Thousand Barrels",
title = "Forecasts for U.S. Crude oil exports to OECD Europe") +
guides(colour = guide_legend(title = "Forecast"))
addi_FC<-fit %>% select(additive)
accuracy(addi_FC)
addi_FC<-fit %>% select(additive) %>% forecast(h=36)
add<-fit %>% select(additive)
#ETS model selection by R
crude_fit <- crude_oil_agg %>%
model(auto_crude_ets = ETS(Total_Exports))
#checking the accuracy
report(crude_fit)
fit_cr<-ETS(crude_oil_agg)
accuracy(crude_fit)
accuracy(crude_fit,add)
accuracy(crude_fit)
add<-fit %>% select(additive)
accuracy(add)
accuracy(crude_oil_fit) %>%
arrange(.model) %>%
select(.model, .type, RMSE, MAE, MAPE, MASE, RMSSE)
combined_accuracy <- accuracy(crude_oil_fit) %>%
arrange(.model) %>%
select(.model, .type, RMSE, MAE, MAPE, MASE, RMSSE) %>%
bind_rows(
accuracy(add),
accuracy(crude_fit)
)
combined_accuracy
#determining best ETS model
fit<-crude_oil_agg %>%
model(
additive_ETS=ETS(Total_Exports~error("A")+trend("A")+season("A")),
multiplicative_ETS = ETS(Total_Exports ~ error("M") + trend("M") + season("M")),
random1_ETS = ETS(Total_Exports ~ error("M") + trend("A") + season("A")),
)
#checking accuracy
accuracy(fit)
print(tidy(fit),n=68)
#ploting
fit %>% select(additive) %>% components() %>% autoplot() + xlab("Month")
# Print the selected ETS model
print(crude_fit$auto_crude_ets)
tidy(crude_fit)
fit_cr<-ETS(crude_oil_agg)
fit_cr$model
accuracy(crude_fit)
report(crude_fit)
components(crude_fit) %>% autoplot()
auto_crud<-crude_fit %>% select(auto_crude_ets) %>% forecast(h=36)
auto_crud%>%
autoplot(
crude_oil_agg) +
labs(
y = "Thousand Barrels",
title = "Forecasts for U.S. Crude oil exports to OECD Europe") +
guides(colour = guide_legend(title = "Forecast"))
auto<-crude_fit %>% select(auto_crude_ets)
residuals(auto) %>% ACF(.resid) %>% autoplot()
for_crd<-crude_fit %>% forecast(h=12)
for_crd %>% autoplot()
# Obtain the residuals
crude_residuals <- residuals(crude_fit)
# Plot the residuals
plot(crude_residuals, type = "l", main = "Residuals of crude_fit Model")
accuracy(crude_fit)
combined_accuracy <- accuracy(crude_oil_fit) %>%
arrange(.model) %>%
select(.model, .type, RMSE, MAE, MAPE, MASE, RMSSE) %>%
bind_rows(
accuracy(add),
accuracy(crude_fit)
)
combined_accuracy
add<-fit %>% select(additive_ETS)
combined_accuracy <- accuracy(crude_oil_fit) %>%
arrange(.model) %>%
select(.model, .type, RMSE, MAE, MAPE, MASE, RMSSE) %>%
bind_rows(
accuracy(add),
accuracy(crude_fit)
)
combined_accuracy
knitr::opts_chunk$set(echo = TRUE)
# Compute lambda using guerrero method for Crude Oil
lambda1 <- total_exp_oecd %>%
filter(`Export Type` == "Amount of Crude Oil (Thousand Barrels)") %>%
index_by(Date) %>%
summarise(Total_Exports = sum(`Amount`)) %>%
features(Total_Exports, features = guerrero) %>%
pull(lambda_guerrero)
# Apply Box-Cox transformation
crude_oil_agg <- total_exp_oecd %>% filter(year(Date) >= 2016) %>%
filter(`Export Type` == "Amount of Crude Oil (Thousand Barrels)") %>%
index_by(Date) %>%
summarise(Total_Exports = sum(`Amount`)) %>%
mutate(Total_Exports = box_cox(Total_Exports, lambda = lambda1))
# Compute lambda using guerrero method for Natural gas
lambda3 <- total_exp_oecd %>%
filter(`Export Type` == "Amount of Natural gas (BOE)") %>%
index_by(Date) %>%
summarise(Total_Exports = sum(`Amount`)) %>%
features(Total_Exports, features = guerrero) %>%
pull(lambda_guerrero)
# Apply Box-Cox transformation
nat_gas_agg <- total_exp_oecd %>% filter(year(Date) >= 2016) %>%
filter(`Export Type` == "Amount of Natural gas (BOE)") %>%
index_by(Date) %>%
summarise(Total_Exports = sum(`Amount`)) %>%
mutate(Total_Exports = box_cox(Total_Exports, lambda = lambda3))
# Combine the transformed time series
combined_data <- merge(crude_oil_agg, nat_gas_agg, by = "Date", all = TRUE)
#plotting time series
#Determining the ETS Model for Crude OIL
ggplot(combined_data, aes(x = Date)) +
geom_line(aes(y = Total_Exports.x, color = "Crude Oil")) +
geom_line(aes(y = Total_Exports.y, color = "Natural Gas")) +
ylab("Amount (Transformed)") +
ggtitle("Crude Oil and Natural Gas Exports") +
scale_color_manual(values = c("Crude Oil" = "red", "Natural Gas" = "green"))
addi_FC %>%
autoplot(
crude_oil_agg) +
labs(
y = "Thousand Barrels",
title = "Forecasts for U.S. Crude oil exports to OECD Europe") +
guides(colour = guide_legend(title = "Forecast"))
report(crude_fit)
augment(naive_crude_oil) %>%
ggplot(aes(x = crude_oil_train$Date))+
geom_line(aes(y = crude_oil_train$`Amount of Crude Oil (Thousand Barrels)`, colour = 'Data')) +
geom_abline(aes(y = .ftted, colour = 'Fitted'))
augment(naive_crude_oil) %>%
features(.resid, ljung_box, lag = 50)
augment(mean_oil_prod) %>%
features(.resid, ljung_box, lag = 50)
nat_gas_train <- oecd_nat_gas_agg %>%
filter(Date <= as.Date("2019-01-01"))
nat_gas_train
nat_gas_fit <- nat_gas_train %>%
model(
Mean = MEAN(`Amount of Natural gas (MMcf)`),
Naive = NAIVE(`Amount of Natural gas (MMcf)`),
SNaive = SNAIVE(`Amount of Natural gas (MMcf)`),
Drift = RW(`Amount of Natural gas (MMcf)` ~ drift())
)
nat_gas_fit
nat_gas_fit
nat_gas_fit <- nat_gas_train %>%
model(
Mean = MEAN(`Amount of Natural gas (MMcf)`),
Naive = NAIVE(`Amount of Natural gas (MMcf)`),
SNaive = SNAIVE(`Amount of Natural gas (MMcf)`),
Drift = RW(`Amount of Natural gas (MMcf)` ~ drift())
)
nat_gas_train
nat_gas_fit <- nat_gas_train %>%
model(
Mean = MEAN(`Amount of Natural gas (BOE)`),
Naive = NAIVE(`Amount of Natural gas (BOE)`),
SNaive = SNAIVE(`Amount of Natural gas (BOE)`),
Drift = RW(`Amount of Natural gas (BOE))` ~ drift())
)
nat_gas_fit <- nat_gas_train %>%
model(
Mean = MEAN(`Amount of Natural gas (BOE)`),
Naive = NAIVE(`Amount of Natural gas (BOE)`),
SNaive = SNAIVE(`Amount of Natural gas (BOE)`),
Drift = RW(`Amount of Natural gas (BOE)` ~ drift())
)
nat_gas_fit
nat_gas_fc <- nat_gas_fit %>%
forecast(h = 36)
nat_gas_fc
accuracy(nat_gas_fit) %>%
arrange(.model) %>%
select(.model, .type, RMSE, MAE, MAPE, MASE, RMSSE)
nat_gas_fc %>%
autoplot(
oecd_nat_gas_agg,
level = NULL) +
labs(
y = "Amount of natural gas (MMcf)",
title = "Forecasts for U.S. Natural gas exports to OECD Europe") +
guides(colour = guide_legend(title = "Forecast"))
naive_nat_gas <- nat_gas_train %>%
model(NAIVE(nat_gas_train$Total_Exports))
#not working
augment(naive_nat_gas) %>%
ggplot(aes(x = nat_gas_train$Date))+
geom_line(aes(y = nat_gas_train$`Amount of Natural gas (MMcf)`, colour = 'Data')) +
geom_abline(aes(y = .ftted, colour = 'Fitted'))
#All residual diagnostic graphs
gg_tsresiduals(naive_nat_gas)
#plotting all residuals
augment(naive_nat_gas) %>%
autoplot(.resid) +
labs(y = 'Amount of Natural gas (MMcf)',
title = 'Residuals from the Naive model')
#Histogram
augment(naive_nat_gas) %>%
ggplot(aes(x = .resid)) +
geom_histogram(bins = 50) +
labs(title = 'Histogram of naive model residuals')
#ACF
augment(naive_nat_gas) %>%
ACF(.resid) %>%
autoplot() + labs(title = 'ACF of residuals')
#ACF
augment(naive_nat_gas) %>%
ACF(.resid) %>%
autoplot() + labs(title = 'ACF of residuals')
augment(mean_oil_prod) %>%
features(.resid, ljung_box, lag = 50)
combined_accuracy <- accuracy(crude_oil_fit) %>%
arrange(.model) %>%
select(.model, .type, RMSE, MAE, MAPE, MASE, RMSSE) %>%
bind_rows(
accuracy(add),
accuracy(crude_fit)
)
combined_accuracy
knitr::opts_chunk$set(echo = FALSE)
total_exp_oecd %>% ggplot(
aes(Date,Amount,color = `Export type`)) +
geom_line()+
labs(x = "Date", y = "Amount")+
scale_color_discrete(name = "") +
theme(legend.position = "bottom", legend.box = "horizontal") +
guides(color = guide_legend(nrow = 2, ncol = 3))
gg_tsresiduals(crude_fit)
>>>>>>> Stashed changes
